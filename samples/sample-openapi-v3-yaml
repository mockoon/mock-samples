openapi: "3.0.0"
info:
  title: "Sample v3 schema"
  description: "Sample v3 schema"
  version: "1.0.0"
servers:
  - url: "{scheme}://mockoon.com/{path}"
    variables:
      scheme:
        enum:
          - "https"
          - "http"
        default: "https"
      path:
        enum:
          - "api"
          - "apiv2"
        default: "api"
paths:
  /endpoint:
    get:
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SchemaObject"
          headers:
            Header-From-Example:
              schema:
                type: string
              example: example value
            Header-From-First-Examples:
              schema:
                type: string
              examples:
                test:
                  value: first example value
            Header-From-Schema-String:
              schema:
                type: string
            Header-From-Schema-Int:
              schema:
                type: integer
  /endpoint2:
    get:
      responses:
        default:
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SchemaObject"
  /endpoint3:
    get:
      responses:
        default:
          description: "Success"
          content:
            application/json; charset=utf-8:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SchemaObject"
  /model:
    get:
      summary: Returns a model.
      description: Some description.
      responses:
        "200":
          description: A model with a name
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Model"
  /circular:
    get:
      responses:
        "200":
          description: "Circular reference example"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircularSchemaA"
  /ext-ref:
    get:
      responses:
        "200":
          description: "Circular reference example"
          content:
            application/json:
              schema:
                $ref: "https://mock-7b3c05d9.us2.mockoon.app/ref/#/ExtSchema"

components:
  schemas:
    SchemaObject:
      properties:
        id:
          type: "integer"
          format: "int64"
        order:
          type: "number"
          format: "double"
        quantity:
          type: "number"
          format: "float"
        datetime:
          type: "string"
          format: "date-time"
        date:
          type: "string"
          format: "date"
        age:
          type: "integer"
          default: "32"
        email:
          type: "string"
          format: "email"
        uuid:
          type: "string"
          format: "uuid"
        tags:
          type: "array"
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: "string"
          description: "Order Status"
          enum:
            - "enum1"
            - "enum2"
            - "enum3"
        inProgress:
          type: "boolean"
        complete:
          type: "boolean"
          example: true
        categories:
          type: "array"
          items:
            $ref: "#/components/schemas/Category"
        allOfArray:
          type: "array"
          items:
            allOf:
              - $ref: "#/components/schemas/Category"
              - $ref: "#/components/schemas/Tag"
        oneOfArray:
          type: "array"
          items:
            oneOf:
              - $ref: "#/components/schemas/Tag"
              - $ref: "#/components/schemas/Category"
        anyOfArray:
          type: "array"
          items:
            anyOf:
              - $ref: "#/components/schemas/Category"
              - $ref: "#/components/schemas/Tag"

    CircularSchemaA:
      type: object
      properties:
        name:
          type: string
        related:
          $ref: "#/components/schemas/CircularSchemaB"

    CircularSchemaB:
      type: object
      properties:
        id:
          type: integer
        parent:
          $ref: "#/components/schemas/CircularSchemaA"

    Category:
      type: "object"
      properties:
        name:
          type: "string"

    Tag:
      type: "string"

    Model:
      type: object
      properties:
        name:
          type: string
      example:
        name: custom_name
